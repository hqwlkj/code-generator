package com.coloseo.hubblenet.dao.mapper;

import com.coloseo.hubblenet.dao.domain.【xjh-objectName】;
import org.apache.ibatis.annotations.*;
import java.util.List;

/**
 * 【xjh-objectName】Mapper
 *
 * @author 【xjh-name】
 * @date 【xjh-date】
 */
@Mapper
public interface 【xjh-objectName】Mapper {

    String TABLE_NAME = "【xjh-tableName】";

    String STANDARD_DELETE = "delete from "+TABLE_NAME+" where id=#{id}";
    String STANDARD_DETAIL = "select * from "+TABLE_NAME+" where id=#{id}";
    String STANDARD_SELECT_LIST = "select * from "+TABLE_NAME+" order by id desc";

    String SQL_CONDITIONAL = 【xjh-loopSelect】;

    String STANDARD_INSERT = "insert into "+TABLE_NAME+"(" +
            【xjh-loopInsert1】
            ") values(" +
            【xjh-loopInsert2】
            ")";

    String STANDARD_UPDATE_CONDITIONAL = "<script>" +
            "update "+TABLE_NAME+" set " +
            【xjh-loopUpdate】
            "id=#{id}" +
            " where id=#{id};" +
            "</script>";

    String STANDARD_SELECT_LIST_CONDITIONAL = "<script>" +
            "select * from "+TABLE_NAME+" " +
            "<where>" +
            SQL_CONDITIONAL+
            "</where>" +
            " order by id desc" +
            "</script>";

    String STANDARD_SELECT_PAGED_COUNT = "<script>" +
            "select count(*) from " + TABLE_NAME + " " +
            "<where>" +
            SQL_CONDITIONAL+
            "</where>" +
            "</script>";

    String STANDARD_SELECT_PAGED_LIST_CONDITIONAL = "<script>" +
            "select * from " + TABLE_NAME + " " +
            "<where>" +
            SQL_CONDITIONAL+
            "</where>" +
            " order by id desc" +
            " limit #{pageSize} offset #{offset}" +
            "</script>";

    /**
     * 标准插入
     *
     * @author 【xjh-name】
     * @date 【xjh-date】
     * @param obj
     * @return
     */
    @Insert(STANDARD_INSERT)
    @Options(useGeneratedKeys=true, keyProperty="id", keyColumn="id")
    Long insert(【xjh-objectName】 obj);

    /**
     * 标准按条件修改
     *
     * @author 【xjh-name】
     * @date 【xjh-date】
     * @param obj
     * @return
     */
    @Update(STANDARD_UPDATE_CONDITIONAL)
    Long update(【xjh-objectName】 obj);

    /**
     * 标准删除
     *
     * @author 【xjh-name】
     * @date 【xjh-date】
     * @param id
     * @return
     */
    @Delete(STANDARD_DELETE)
    Long delete(Long id);

    /**
     * 标准获取详情
     *
     * @author 【xjh-name】
     * @date 【xjh-date】
     * @param id
     * @return
     */
    @Select(STANDARD_DETAIL)
    @Results({
            【xjh-loopResult】
    })
    【xjh-objectName】 detail(Long id);

    /**
     * 标准查询所有列表
     *
     * @author 【xjh-name】
     * @date 【xjh-date】
     * @return
     */
    @Select(STANDARD_SELECT_LIST)
    @Results({
            【xjh-loopResult】
    })
    List<【xjh-objectName】> getAll();

    /**
     * 标准条件查询列表
     *
     * @author 【xjh-name】
     * @date 【xjh-date】
     * @param obj
     * @return
     */
    @Select(STANDARD_SELECT_LIST_CONDITIONAL)
    @Results({
            【xjh-loopResult】
    })
    List<【xjh-objectName】> getAllConditional(【xjh-objectName】 obj);

    /**
     * 标准分页条件查询列表
     *
     * @author 【xjh-name】
     * @date 【xjh-date】
     * @param obj
     * @return
     */
    @Select(STANDARD_SELECT_PAGED_LIST_CONDITIONAL)
    @Results({
            【xjh-loopResult】
    })
    List<【xjh-objectName】> getPagedListConditional(【xjh-objectName】 obj);

    /**
     * 标准分页条数查询
     *
     * @author 【xjh-name】
     * @date 【xjh-date】
     * @param obj
     * @return
     */
    @Select(STANDARD_SELECT_PAGED_COUNT)
    Integer getPagedCount(【xjh-objectName】 obj);

}