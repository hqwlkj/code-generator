package com.coloseo.hubblenet.service;

import com.coloseo.hubblenet.dao.domain.【xjh-objectName】;
import com.coloseo.hubblenet.dao.mapper.【xjh-objectName】Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.List;

/**
 * 【xjh-objectName】Service
 *
 * @author 【xjh-name】
 * @date 【xjh-date】
 */
@Service
public class 【xjh-objectName】Service {

    @Autowired
    private 【xjh-objectName】Mapper mapper;

    /**
     * 新增 【xjh-objectName】 记录
     *
     * @param obj
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
    public Long insert(【xjh-objectName】 obj){
        obj.setGmtCreate(Timestamp.from(Instant.now()));
        return mapper.insert(obj);
    }

    /**
     * 修改 【xjh-objectName】 记录
     *
     * @param obj
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
    public Long update(【xjh-objectName】 obj){
        obj.setGmtModified(Timestamp.from(Instant.now()));
        return mapper.update(obj);
    }

    /**
     * 删除 【xjh-objectName】 记录
     *
     * @param id
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
    public Long delete(Long id){
        return mapper.delete(id);
    }

    /**
     * 查询 【xjh-objectName】 记录详情
     *
     * @param id
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
    public 【xjh-objectName】 detail(Long id){
        return mapper.detail(id);
    }

    /**
     * 分页条件查询 【xjh-objectName】 列表
     *
     * @param obj
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
    public List<【xjh-objectName】> getPagedListConditional(【xjh-objectName】 obj){
        return mapper.getPagedListConditional(obj);
    }

    /**
     * 【xjh-objectName】 列表分页查询记录总数
     *
     * @param obj
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
    public Integer getPagedCount(【xjh-objectName】 obj){
        return mapper.getPagedCount(obj);
    }

}
