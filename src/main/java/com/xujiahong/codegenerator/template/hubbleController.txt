package com.coloseo.hubblenet.web;

import com.coloseo.hubblenet.dao.domain.BaseEntity;
import com.coloseo.hubblenet.dao.domain.【xjh-objectName】;
import com.coloseo.hubblenet.service.【xjh-objectName】Service;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 【xjh-chName】-控制器
 *
 * @author 【xjh-name】
 * @date 【xjh-date】
 */
@RestController
@RequestMapping("/api/net/【xjh-lower-objectName】")
public class 【xjh-objectName】Controller {

    @Autowired
    private 【xjh-objectName】Service service;

    /**
     * 新增 【xjh-objectName】 记录
     *
     * @param obj
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
     @ApiOperation(value = "新增 【xjh-objectName】 记录", notes = "标准新增方法，新增 【xjh-objectName】 记录，返回包含自增ID的详情信息")
     @ApiImplicitParams({
【xjh-loopSwagger】
     })
    @PostMapping
    public Map<String,Object> insert(@RequestBody 【xjh-objectName】 obj) {
        if(obj==null){
            return ReturnJsonUtil.fail("入参错误");
        }
        if(service.insert(obj)>0){
            return ReturnJsonUtil.success(obj);
        }else{
            return ReturnJsonUtil.fail();
        }
    }

    /**
     * 修改 【xjh-objectName】 记录
     *
     * @param obj
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
    @ApiOperation(value = "修改 【xjh-objectName】 记录", notes = "标准修改方法，修改 【xjh-objectName】 记录，并返回详情")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "ID"),
【xjh-loopSwagger】
     })
    @PutMapping
    public Map<String,Object> update(@RequestBody 【xjh-objectName】 obj) {
        if(obj==null || obj.getId()==null){
            return ReturnJsonUtil.fail("入参错误");
        }
        if(service.update(obj)>0){
            return ReturnJsonUtil.success(obj);
        }else{
            return ReturnJsonUtil.fail();
        }
    }

    /**
     * 删除 【xjh-objectName】 记录
     *
     * @param id
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
    @ApiOperation(value = "删除 【xjh-objectName】 记录", notes = "标准删除方法，删除 【xjh-objectName】 记录")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "ID")
    })
    @DeleteMapping
    public Map<String,Object> delete(Long id) {
        if(id==null){
            return ReturnJsonUtil.fail("入参错误");
        }
        if(service.delete(id)>0){
            return ReturnJsonUtil.success();
        }else{
            return ReturnJsonUtil.fail();
        }
    }

    /**
     * 分页条件查询 【xjh-objectName】 列表
     *
     * @param obj
     * @return
     * @author 【xjh-name】
     * @date 【xjh-date】
     */
     @ApiOperation(value = "分页条件查询 【xjh-objectName】 列表",
      notes = "标准分页条件查询：默认查询所有，传pageNo,pageSize实现分页功能，传其他字段实现模糊查询")
     @ApiImplicitParams({
【xjh-loopSwagger】
     })
    @GetMapping
    public Map<String,Object> getPagedListConditional(【xjh-objectName】 obj) {
        if(obj==null){
            obj = new 【xjh-objectName】();
        }
        List<【xjh-objectName】> list = service.getPagedListConditional(obj);
        Map<String,Object> resultMap = ReturnJsonUtil.success();
        Integer count = 0;
        //list有值
        if(list!=null && list.size()>0){
            //分页单位pageSize不为空、不为零、不为默认的999；即存在分页条件
            if(obj.getPageSize()!=null && obj.getPageSize().intValue()>0
                    && !obj.getPageSize().equals(BaseEntity.DEFAULT_PAGE_SIZE)){
                count = service.getPagedCount(obj);
                resultMap.put("count",count);
            }
        }else{
            list = new ArrayList<>();
        }
        resultMap.put("list",list);
        return resultMap;
    }

}
